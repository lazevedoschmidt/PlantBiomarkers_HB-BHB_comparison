TukeyHSD(av)
eoctrilm <- lm(values ~ Basin, data = eocdatatri)
av <- aov(eoctrilm)
summary(av)
test <- HSD.test(av, 'Basin')
test
TukeyHSD(av)
#Making palette for time intervals
palette2 <- c("#0F0D0E","#D9D0D3","#CCBA72")
avg_terp_error <- ggplot(data, aes(x=Basin, y=values, fill=Epoch)) +
geom_boxplot(alpha=0.75, outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(jitter.width = NULL,
jitter.height = 0,
dodge.width = 0.75,
seed = NA),
size=1)+
xlab("")+
ylab("Sum Terpenoid (µg/gC )")+
scale_fill_manual(values=palette2,
guide = guide_legend(order = 2))+
guides(fill = guide_legend(reverse = TRUE))+
theme_light()+
theme(legend.position = "none")+ #had to remove legend for new figure
facet_wrap(~ID)
avg_terp_error
#All palettes created for this paper
#Color palette for time slices----
#colors are orderd to Paleocene, PETM, Eocene
timecolors <- c("#2EC4B6","#E71D36","#FF9F1C")
#time and basin color palette----
timebasincol <- c("#2EC4B6","#E71D36","#FF9F1C","#FDFFFC","#011627")
#Color palette of pie chart----
piecolors <- c("#15616D","#78290F","#FFA047")
#Color palette for TOC Lithology----
mycolors2 <- c("#F4F1DE","#E07A5F",
"#E5A58A","#885959",
"#B86C5E","#5F797B",
"#3D405B","#81B29A",
"#A4AB73","#6C719D",
"#DB911A","#634040",
"#C0D8CC")
palette <- c("#9986A5", "#CCBA72","#79402E", "#0F0D0E","#D9D0D3")
#Making palette for time intervals
palette2 <- c("#0F0D0E","#D9D0D3","#CCBA72")
#Creating color palette
# mycolors <- c("#99d8c9","#9ebcda",
#               "#fdbb84","#c994c7",
#               "#edf8b1","#bcbddc",
#               "#2ca25f","#8856a7",
#               "#7fcdbb","#dd1c77",
#               "#2c7fb8","#756bb1",
#               "#636363")
#
# mycolors2 <- c("#F4F1DE","#E07A5F",
#                "#E5A58A","#885959",
#                "#B86C5E","#5F797B",
#                "#3D405B","#81B29A",
#                "#A4AB73","#6C719D",
#                "#DB911A","#634040",
#                "#C0D8CC")
updatedcolors <- c("#6C719D","#81B29A",
"#E5A58A", "#E07A5F")
##############################################################################
#Name: Lauren Azevedo Schmidt
#R version: 3.6.1
#Purpose: Normalized alkanes and hopanes
#date started: 04.16.2020
#############################################################################
#wd
getwd()
#packages
require(ggplot2)
require(vegan)
require(paletteer)
require(tidyverse)
require(wesanderson)
require(cowplot)
require(stats)
require(ggsignif)
require(ggpubr)
require(ggpmisc)
require(dplyr)
require(stats)
require(lme4)
require(lmerTest)
library(agricolae)
library(EnvStats)
#load data file----
avg_data <- read.csv("AVG_normalized_alkane_hopane.csv", header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
avg_data<- subset(avg_data,Epoch!="?")
#subsetting the data so that any Epoch that is
#unknown or denoted by a "?", is deleted from the data
avg_data$Sample.ID <- NULL #removing sample ID column
#Ordering legend properly
avg_data$Epoch <- factor(avg_data$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
alk_data <- read.csv("Normalized_alkane_Hopane.csv", header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
alk_data<- subset(alk_data,Epoch!="?")
#subsetting the data so that any Epoch that is
#unknown or denoted by a "?", is deleted from the data
alk_data$Sample.ID <- NULL #removing sample ID column
#Ordering legend properly
alk_data$Epoch <- factor(alk_data$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
#data manipulation----
#all data
# alkhop_data <- alkhop_data %>%
#   dplyr::select(Basin, Epoch, Sum.C27.35.ODD, SUM.C27.35,
#                 Total.Hopanes, Sum.Hopanes.Sum.C27.C35alkanes)%>%
#   drop_na()
avg_data <- avg_data %>%
dplyr::select(Basin, Epoch, AVG.C27.35.ODD, AVG.Hopanes,
AVG.Hopanes.AVG.n.alk)%>%
drop_na()
alk_data.summary <- alk_data %>%
dplyr::select(Basin, Epoch, Sum.C27.35.ODD, Total.Hopanes,
Sum.Hopanes.Sum.C27.C35alkanes)%>%
drop_na()%>%
group_by(Basin, Epoch)%>%
summarise(mean.odd=mean(Sum.C27.35.ODD),
sd.odd = sd(Sum.C27.35.ODD),
mean.hop=mean(Total.Hopanes),
sd.hop = sd(Total.Hopanes),
mean.alk=mean(Sum.Hopanes.Sum.C27.C35alkanes),
sd.alk = sd(Sum.Hopanes.Sum.C27.C35alkanes),
count = n())
alk_data.summary$Epoch <- factor(alk_data.summary$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
#odd box plots----
alk_data2 <- read.csv("Normalized_alkane_Hopanev2.csv", header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
alk_data2<- subset(alk_data2,Epoch!="?")
#subsetting the data so that any Epoch that is
#unknown or denoted by a "?", is deleted from the data
alk_data2$Sample.ID <- NULL #removing sample ID column
alk_data2$Epoch <- factor(alk_data2$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
test <- rosnerTest(alk_data2$Sum.C27.35.ODD,
k = 10
)
test
alk_data2 <- alk_data2[c(-50,-47,-48,-43,-45,-44,-46,-42),]
bhbdata <- filter(alk_data2, Basin=='Bighorn Basin')
hbdata <- filter(alk_data2, Basin=='Hanna Basin')
#Tukey's test n-alkanes----
hblm <- lm(Sum.C27.35.ODD ~ Epoch, data = hbdata)
av <- aov(hblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av) #pairwise tukey test
#Tukey's test nalkanes----
bhblm <- lm(Sum.C27.35.ODD ~ Epoch, data = bhbdata)
av <- aov(bhblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av)
#comparing across basins----
paldata <- filter(alk_data2, Epoch=='Paleocene')
eocdata <- filter(alk_data2, Epoch=='Eocene')
baslm <- lm(Sum.C27.35.ODD ~ Basin, data=paldata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
baslm <- lm(Sum.C27.35.ODD ~ Basin, data=eocdata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
oddplot <- ggplot(alk_data2, aes(x = Basin, y =Sum.C27.35.ODD, fill = Epoch)) +
geom_boxplot(alpha=0.75, outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(jitter.width = NULL,
jitter.height = 0,
dodge.width = 0.75,
seed = NA),
size=1)+
scale_x_discrete(drop=FALSE)+
scale_fill_manual(values=palette2)+
# guide = guide_legend(order = 2)
#ggtitle("Alkane changes across basins \nby Epoch")+
labs(y=expression("Sum nC"[27-35](odd, µg/gC)), x=(""))+
guides(fill = guide_legend(reverse = TRUE), drop=FALSE)+ #flips legend for geologic order
theme_light()+
theme(legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
oddplot
#hopane plot----
alk_data2 <- read.csv("Normalized_alkane_Hopanev2.csv", header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
alk_data2<- subset(alk_data2,Epoch!="?")
#subsetting the data so that any Epoch that is
#unknown or denoted by a "?", is deleted from the data
alk_data2$Sample.ID <- NULL #removing sample ID column
test <- rosnerTest(alk_data2$Total.Hopanes,
k = 10
)
test
alk_data2 <-alk_data2[c(-21,-20,-51,-50,-19,-17,-53),]
bhbdata <- filter(alk_data2, Basin=='Bighorn Basin')
hbdata <- filter(alk_data2, Basin=='Hanna Basin')
#Tukey's test hopanes----
hblm <- lm(Total.Hopanes ~ Epoch, data = hbdata)
av <- aov(hblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av)
#Tukey's test hopanes----
bhblm <- lm(Total.Hopanes ~ Epoch, data = bhbdata)
av <- aov(bhblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av)
#comparing across basins----
paldata <- filter(alk_data2, Epoch=='Paleocene')
eocdata <- filter(alk_data2, Epoch=='Eocene')
baslm <- lm(Total.Hopanes ~ Basin, data=paldata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
baslm <- lm(Total.Hopanes ~ Basin, data=eocdata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
# alk_data2 <- read.csv("Normalized_alkane_Hopanev2.csv", header=T, sep=",",
#                      na.strings=  "NA", dec=".", strip.white=TRUE)
# alk_data2<- subset(alk_data2,Epoch!="?")
# #subsetting the data so that any Epoch that is
# #unknown or denoted by a "?", is deleted from the data
# alk_data2$Sample.ID <- NULL #removing sample ID column
# #alk_data2 <-alk_data2[c(-21,-20,-51,-50,-19,-17,-53),]
# #Ordering legend properly
alk_data2$Epoch <- factor(alk_data2$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
hopplot <- ggplot(alk_data2, aes(x = Basin, y =Total.Hopanes, fill = Epoch)) +
geom_boxplot(alpha=0.75, outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(jitter.width = NULL,
jitter.height = 0,
dodge.width = 0.75,
seed = NA),
size=1)+
scale_fill_manual(values=palette2)+
# guide = guide_legend(order = 2)
ggtitle("Hopane changes across basins \nby Epoch")+
labs(y=expression("Sum Hopanes (µg/gC) "), x=(""))+
guides(fill = guide_legend(reverse = TRUE), drop=FALSE)+ #flips legend for geologic order
theme_light()+
theme(legend.position = "none")+
scale_x_discrete(drop=FALSE)
hopplot
#bacteria figures----
alk_data2 <- read.csv("Normalized_alkane_Hopanev2.csv", header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
alk_data2<- subset(alk_data2,Epoch!="?")
#subsetting the data so that any Epoch that is
#unknown or denoted by a "?", is deleted from the data
alk_data2$Sample.ID <- NULL #removing sample ID column
test <- rosnerTest(alk_data2$Sum.Hopanes.Sum.C27.C35alkanes,
k = 10
)
test
alk_data <-alk_data[c(-33,-21,-6,-20),]
# alk_data2 <- read.csv("Normalized_alkane_Hopanev2.csv", header=T, sep=",",
#                       na.strings=  "NA", dec=".", strip.white=TRUE)
# alk_data2<- subset(alk_data2,Epoch!="?")
# #subsetting the data so that any Epoch that is
# #unknown or denoted by a "?", is deleted from the data
# alk_data2$Sample.ID <- NULL #removing sample ID column
# #alk_data2 <-alk_data2[c(-33,-21,-6,-20),]
alk_data2$Epoch <- factor(alk_data2$Epoch, levels = c("Paleocene", "PETM",
"Eocene"))
bhbdata <- filter(alk_data2, Basin=='Bighorn Basin')
hbdata <- filter(alk_data2, Basin=='Hanna Basin')
#Tukey's test bacteria----
hblm <- lm(Sum.Hopanes.Sum.C27.C35alkanes ~ Epoch, data = hbdata)
av <- aov(hblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av)
#Tukey's test bacteria----
bhblm <- lm(Sum.Hopanes.Sum.C27.C35alkanes ~ Epoch, data = bhbdata)
av <- aov(bhblm)
summary(av)
test <- HSD.test(av, 'Epoch')
test
TukeyHSD(av)
#comparing across basins----
paldata <- filter(alk_data2, Epoch=='Paleocene')
eocdata <- filter(alk_data2, Epoch=='Eocene')
baslm <- lm(Sum.Hopanes.Sum.C27.C35alkanes ~ Basin, data=paldata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
baslm <- lm(Sum.Hopanes.Sum.C27.C35alkanes ~ Basin, data=eocdata)
basav <- aov(baslm)
summary(basav)
bastest <- HSD.test(basav, 'Basin')
bastest
TukeyHSD(basav)
bacplot <-ggplot(alk_data2, aes(x = Basin, y =Sum.Hopanes.Sum.C27.C35alkanes,
fill = Epoch)) +
geom_boxplot(alpha=0.75, outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(jitter.width = NULL,
jitter.height = 0,
dodge.width = 0.75,
seed = NA),
size=1)+
scale_x_discrete(drop=FALSE)+
scale_fill_manual(values=palette2)+
# guide = guide_legend(order = 2)
ggtitle("Bacterial input relative \nto alkanes")+
labs(y=expression("Sum Hopanes/Sum nC"[27-35] (odd)), x=(""))+
guides(fill = guide_legend(reverse = TRUE), drop=FALSE)+ #flips legend for geologic order
theme_light()+
theme(legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))+
theme(legend.position = "none")
bacplot
#plotting all together----
super_plot <- plot_grid(oddplot,
# allplot,
hopplot,
bacplot,
#legend.alk,
nrow = 1,
ncol=3,
labels = c("A", "B", "C"))
super_plot
View(alk_data)
#Pr/PH:TAR analysis
# load ggplot2
require(ggplot2)
require(tidyverse)
require(stats)
require(ggsignif)
require(ggpubr)
require(ggpmisc)
require(dplyr)
require(scales)
#load data file
pr.ph.tar <- read.table("Pr:Ph_TAR.csv",
header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
pr.ph.tar<- subset(pr.ph.tar,Epoch!="UNK")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="?")
test <- rosnerTest(pr.ph.tar$Pr.Ph,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-39,]
test <- rosnerTest(pr.ph.tar$TAR,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-53,]
pr.ph.tar %>%
group_by(Basin, Epoch) %>%
summarise(COUNT = n())
View(pr.ph.tar)
pr.ph.tar %>%
group_by(Basin, Epoch,Pr.Ph,TAR) %>%
summarise(COUNT = n())
#load data file
pr.ph.tar <- read.table("Pr:Ph_TAR.csv",
header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
pr.ph.tar<- subset(pr.ph.tar,Epoch!="UNK")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="?")
test <- rosnerTest(pr.ph.tar$Pr.Ph,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-39,]
test <- rosnerTest(pr.ph.tar$TAR,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-53,]
pr.ph.tar %>%
group_by(Basin, Epoch) %>%
summarise(COUNT = n())
pr.ph.tar %>%
group_by(Basin, Epoch) %>%
drop_na()%>%
summarise(COUNT = n())
#load data file
pr.ph.tar <- read.table("Pr:Ph_TAR.csv",
header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
pr.ph.tar<- subset(pr.ph.tar,Epoch!="UNK")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="")
pr.ph.tar<- subset(pr.ph.tar,Epoch!="?")
test <- rosnerTest(pr.ph.tar$Pr.Ph,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-39,]
test <- rosnerTest(pr.ph.tar$TAR,
k = 10
)
test
pr.ph.tar <- pr.ph.tar[-53,]
pr.ph.tar %>%
group_by(Basin, Epoch) %>%
drop_na()%>%
summarise(COUNT = n())
paq <- read.table("PAQ_data.csv", header=T, sep=",",
na.strings= "NA", dec=".", strip.white=TRUE)
paq <- paq[c(-66:-138),] #removing random empty rows
#testing for outliers
test <- rosnerTest(paq$PAQ,
k = 10
)
test #no outliers
library(agricolae)
library(EnvStats)
#load data file
paq <- read.table("PAQ_data.csv", header=T, sep=",",
na.strings= "NA", dec=".", strip.white=TRUE)
paq <- paq[c(-66:-138),] #removing random empty rows
#testing for outliers
test <- rosnerTest(paq$PAQ,
k = 10
)
test #no outliers
paq %>%
group_by(Basin, Epoch) %>%
summarise(COUNT = n())
d13C_alk <- read.table("BHB_HB_d13Calkane.csv",
header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
d13C_alk<- subset(d13C_alk,Epoch!="UNK")
#cleaning dataframes
d13C_alk$d13C.TOC<-NULL
d13C_alk<- d13C_alk %>%
rename(
C29 = d13C.C29..mean..VPDB.,
C31 = d13C.C31..mean..VPDB.
)
#HB only dataset
d13C_alkHB<- subset(d13C_alk,Basin!="Bighorn Basin")
#BHB only dataset
d13C_alkBHB<- subset(d13C_alk,Basin!="Hanna Basin")
d13C_alk <- d13C_alk %>%
dplyr::select(C29,C31, Basin, Epoch)%>%
drop_na()
d13C_alk<- subset(d13C_alk,Epoch!="")
#HB
d13C_alkHB <- d13C_alkHB %>%
dplyr::select(C29,C31, Basin, Epoch)%>%
drop_na()
d13C_alkHB<- subset(d13C_alkHB,Epoch!="")
#BHB
d13C_alkBHB <- d13C_alkBHB %>%
dplyr::select(C29,C31, Basin, Epoch)%>%
drop_na()
d13C_alkBHB<- subset(d13C_alkBHB,Epoch!="")
#counting samples
table(d13C_alkBHB$Epoch)
table(d13C_alkHB$Epoch)
#load data file
dD_data <- read.table("BHB_HB_dD.csv",
header=T, sep=",",
na.strings=  "NA", dec=".", strip.white=TRUE)
dD_data<- subset(dD_data,Epoch!="UNK")
#cleaning dataframes
dD_data<- dD_data %>%
rename(
dD_C29 = dD.n.C29.alkane.mean,
dD_C31 = dD.n.C31.alkane.mean
)
dD_HB<- subset(dD_data,Basin!="Bighorn Basin") #subsetting data to only sample HB
dD_BHB<- subset(dD_data,Basin!="Hanna Basin") #subsetting data to only sample BHB
##############################################################################
#all data
dD_data <- dD_data %>%
dplyr::select(Basin, Epoch, dD_C29, dD_C31)%>%
drop_na()
dD_data<- subset(dD_data,Epoch!="") #subsetting to make sure there are no blanks
#HB
dD_HB <- dD_HB %>%
dplyr::select(Basin, Epoch,dD_C29, dD_C31)%>%
drop_na()
dD_HB<- subset(dD_HB,Epoch!="")
#BHB
dD_BHB <- dD_BHB %>%
dplyr::select(Basin, Epoch,dD_C29, dD_C31)%>%
drop_na()
dD_BHB<- subset(dD_BHB,Epoch!="")
#counting samples
table(dD_BHB$Epoch)
table(dD_HB$Epoch)
